// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AssetAdded extends ethereum.Event {
  get params(): AssetAdded__Params {
    return new AssetAdded__Params(this);
  }
}

export class AssetAdded__Params {
  _event: AssetAdded;

  constructor(event: AssetAdded) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get isDeposit(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class AssetRemoved extends ethereum.Event {
  get params(): AssetRemoved__Params {
    return new AssetRemoved__Params(this);
  }
}

export class AssetRemoved__Params {
  _event: AssetRemoved;

  constructor(event: AssetRemoved) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ManagerFeeIncreaseAnnounced extends ethereum.Event {
  get params(): ManagerFeeIncreaseAnnounced__Params {
    return new ManagerFeeIncreaseAnnounced__Params(this);
  }
}

export class ManagerFeeIncreaseAnnounced__Params {
  _event: ManagerFeeIncreaseAnnounced;

  constructor(event: ManagerFeeIncreaseAnnounced) {
    this._event = event;
  }

  get performanceFeeNumerator(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get managerFeeNumerator(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get announcedFeeActivationTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ManagerFeeIncreaseRenounced extends ethereum.Event {
  get params(): ManagerFeeIncreaseRenounced__Params {
    return new ManagerFeeIncreaseRenounced__Params(this);
  }
}

export class ManagerFeeIncreaseRenounced__Params {
  _event: ManagerFeeIncreaseRenounced;

  constructor(event: ManagerFeeIncreaseRenounced) {
    this._event = event;
  }
}

export class ManagerFeeSet extends ethereum.Event {
  get params(): ManagerFeeSet__Params {
    return new ManagerFeeSet__Params(this);
  }
}

export class ManagerFeeSet__Params {
  _event: ManagerFeeSet;

  constructor(event: ManagerFeeSet) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get performanceFeeNumerator(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get managerFeeNumerator(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get denominator(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ManagerUpdated extends ethereum.Event {
  get params(): ManagerUpdated__Params {
    return new ManagerUpdated__Params(this);
  }
}

export class ManagerUpdated__Params {
  _event: ManagerUpdated;

  constructor(event: ManagerUpdated) {
    this._event = event;
  }

  get newManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManagerName(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class PoolLogicSet extends ethereum.Event {
  get params(): PoolLogicSet__Params {
    return new PoolLogicSet__Params(this);
  }
}

export class PoolLogicSet__Params {
  _event: PoolLogicSet;

  constructor(event: PoolLogicSet) {
    this._event = event;
  }

  get poolLogic(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolManagerLogic__getFeeResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class PoolManagerLogic__getFeeIncreaseInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class PoolManagerLogic__getFundCompositionResultAssetsStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get isDeposit(): boolean {
    return this[1].toBoolean();
  }
}

export class PoolManagerLogic__getFundCompositionResult {
  value0: Array<PoolManagerLogic__getFundCompositionResultAssetsStruct>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;

  constructor(
    value0: Array<PoolManagerLogic__getFundCompositionResultAssetsStruct>,
    value1: Array<BigInt>,
    value2: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }

  getAssets(): Array<PoolManagerLogic__getFundCompositionResultAssetsStruct> {
    return this.value0;
  }

  getBalances(): Array<BigInt> {
    return this.value1;
  }

  getRates(): Array<BigInt> {
    return this.value2;
  }
}

export class PoolManagerLogic__getMaximumFeeResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class PoolManagerLogic__getSupportedAssetsResultValue0Struct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get isDeposit(): boolean {
    return this[1].toBoolean();
  }
}

export class PoolManagerLogic__supportedAssetsResult {
  value0: Address;
  value1: boolean;

  constructor(value0: Address, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getAsset(): Address {
    return this.value0;
  }

  getIsDeposit(): boolean {
    return this.value1;
  }
}

export class PoolManagerLogic extends ethereum.SmartContract {
  static bind(address: Address): PoolManagerLogic {
    return new PoolManagerLogic("PoolManagerLogic", address);
  }

  announcedFeeIncreaseTimestamp(): BigInt {
    let result = super.call(
      "announcedFeeIncreaseTimestamp",
      "announcedFeeIncreaseTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_announcedFeeIncreaseTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "announcedFeeIncreaseTimestamp",
      "announcedFeeIncreaseTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  announcedManagerFeeNumerator(): BigInt {
    let result = super.call(
      "announcedManagerFeeNumerator",
      "announcedManagerFeeNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_announcedManagerFeeNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "announcedManagerFeeNumerator",
      "announcedManagerFeeNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  announcedPerformanceFeeNumerator(): BigInt {
    let result = super.call(
      "announcedPerformanceFeeNumerator",
      "announcedPerformanceFeeNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_announcedPerformanceFeeNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "announcedPerformanceFeeNumerator",
      "announcedPerformanceFeeNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetBalance(asset: Address): BigInt {
    let result = super.call("assetBalance", "assetBalance(address):(uint256)", [
      ethereum.Value.fromAddress(asset)
    ]);

    return result[0].toBigInt();
  }

  try_assetBalance(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetBalance",
      "assetBalance(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetDecimal(asset: Address): BigInt {
    let result = super.call("assetDecimal", "assetDecimal(address):(uint256)", [
      ethereum.Value.fromAddress(asset)
    ]);

    return result[0].toBigInt();
  }

  try_assetDecimal(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetDecimal",
      "assetDecimal(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetPosition(param0: Address): BigInt {
    let result = super.call(
      "assetPosition",
      "assetPosition(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_assetPosition(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetPosition",
      "assetPosition(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetValue(asset: Address, amount: BigInt): BigInt {
    let result = super.call(
      "assetValue",
      "assetValue(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_assetValue(asset: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetValue",
      "assetValue(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetValue1(asset: Address): BigInt {
    let result = super.call("assetValue", "assetValue(address):(uint256)", [
      ethereum.Value.fromAddress(asset)
    ]);

    return result[0].toBigInt();
  }

  try_assetValue1(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("assetValue", "assetValue(address):(uint256)", [
      ethereum.Value.fromAddress(asset)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDepositAssets(): Array<Address> {
    let result = super.call(
      "getDepositAssets",
      "getDepositAssets():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getDepositAssets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getDepositAssets",
      "getDepositAssets():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getFee(): PoolManagerLogic__getFeeResult {
    let result = super.call("getFee", "getFee():(uint256,uint256,uint256)", []);

    return new PoolManagerLogic__getFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getFee(): ethereum.CallResult<PoolManagerLogic__getFeeResult> {
    let result = super.tryCall(
      "getFee",
      "getFee():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolManagerLogic__getFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getFeeIncreaseInfo(): PoolManagerLogic__getFeeIncreaseInfoResult {
    let result = super.call(
      "getFeeIncreaseInfo",
      "getFeeIncreaseInfo():(uint256,uint256,uint256)",
      []
    );

    return new PoolManagerLogic__getFeeIncreaseInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getFeeIncreaseInfo(): ethereum.CallResult<
    PoolManagerLogic__getFeeIncreaseInfoResult
  > {
    let result = super.tryCall(
      "getFeeIncreaseInfo",
      "getFeeIncreaseInfo():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolManagerLogic__getFeeIncreaseInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getFundComposition(): PoolManagerLogic__getFundCompositionResult {
    let result = super.call(
      "getFundComposition",
      "getFundComposition():((address,bool)[],uint256[],uint256[])",
      []
    );

    return new PoolManagerLogic__getFundCompositionResult(
      result[0].toTupleArray<
        PoolManagerLogic__getFundCompositionResultAssetsStruct
      >(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray()
    );
  }

  try_getFundComposition(): ethereum.CallResult<
    PoolManagerLogic__getFundCompositionResult
  > {
    let result = super.tryCall(
      "getFundComposition",
      "getFundComposition():((address,bool)[],uint256[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolManagerLogic__getFundCompositionResult(
        value[0].toTupleArray<
          PoolManagerLogic__getFundCompositionResultAssetsStruct
        >(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray()
      )
    );
  }

  getMaximumFee(): PoolManagerLogic__getMaximumFeeResult {
    let result = super.call(
      "getMaximumFee",
      "getMaximumFee():(uint256,uint256,uint256)",
      []
    );

    return new PoolManagerLogic__getMaximumFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getMaximumFee(): ethereum.CallResult<
    PoolManagerLogic__getMaximumFeeResult
  > {
    let result = super.tryCall(
      "getMaximumFee",
      "getMaximumFee():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolManagerLogic__getMaximumFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getMaximumPerformanceFeeChange(): BigInt {
    let result = super.call(
      "getMaximumPerformanceFeeChange",
      "getMaximumPerformanceFeeChange():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaximumPerformanceFeeChange(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaximumPerformanceFeeChange",
      "getMaximumPerformanceFeeChange():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMembers(): Array<Address> {
    let result = super.call("getMembers", "getMembers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getMembers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getMembers", "getMembers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getSupportedAssets(): Array<
    PoolManagerLogic__getSupportedAssetsResultValue0Struct
  > {
    let result = super.call(
      "getSupportedAssets",
      "getSupportedAssets():((address,bool)[])",
      []
    );

    return result[0].toTupleArray<
      PoolManagerLogic__getSupportedAssetsResultValue0Struct
    >();
  }

  try_getSupportedAssets(): ethereum.CallResult<
    Array<PoolManagerLogic__getSupportedAssetsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getSupportedAssets",
      "getSupportedAssets():((address,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        PoolManagerLogic__getSupportedAssetsResultValue0Struct
      >()
    );
  }

  isDepositAsset(asset: Address): boolean {
    let result = super.call(
      "isDepositAsset",
      "isDepositAsset(address):(bool)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBoolean();
  }

  try_isDepositAsset(asset: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDepositAsset",
      "isDepositAsset(address):(bool)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMemberAllowed(member: Address): boolean {
    let result = super.call(
      "isMemberAllowed",
      "isMemberAllowed(address):(bool)",
      [ethereum.Value.fromAddress(member)]
    );

    return result[0].toBoolean();
  }

  try_isMemberAllowed(member: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMemberAllowed",
      "isMemberAllowed(address):(bool)",
      [ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNftMemberAllowed(member: Address): boolean {
    let result = super.call(
      "isNftMemberAllowed",
      "isNftMemberAllowed(address):(bool)",
      [ethereum.Value.fromAddress(member)]
    );

    return result[0].toBoolean();
  }

  try_isNftMemberAllowed(member: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNftMemberAllowed",
      "isNftMemberAllowed(address):(bool)",
      [ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSupportedAsset(asset: Address): boolean {
    let result = super.call(
      "isSupportedAsset",
      "isSupportedAsset(address):(bool)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBoolean();
  }

  try_isSupportedAsset(asset: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSupportedAsset",
      "isSupportedAsset(address):(bool)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managerFeeNumerator(): BigInt {
    let result = super.call(
      "managerFeeNumerator",
      "managerFeeNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_managerFeeNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managerFeeNumerator",
      "managerFeeNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managerName(): string {
    let result = super.call("managerName", "managerName():(string)", []);

    return result[0].toString();
  }

  try_managerName(): ethereum.CallResult<string> {
    let result = super.tryCall("managerName", "managerName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftMembershipCollectionAddress(): Address {
    let result = super.call(
      "nftMembershipCollectionAddress",
      "nftMembershipCollectionAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nftMembershipCollectionAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nftMembershipCollectionAddress",
      "nftMembershipCollectionAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numberOfMembers(): BigInt {
    let result = super.call(
      "numberOfMembers",
      "numberOfMembers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfMembers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfMembers",
      "numberOfMembers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  performanceFeeNumerator(): BigInt {
    let result = super.call(
      "performanceFeeNumerator",
      "performanceFeeNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_performanceFeeNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceFeeNumerator",
      "performanceFeeNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolLogic(): Address {
    let result = super.call("poolLogic", "poolLogic():(address)", []);

    return result[0].toAddress();
  }

  try_poolLogic(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolLogic", "poolLogic():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setPoolLogic(_poolLogic: Address): boolean {
    let result = super.call("setPoolLogic", "setPoolLogic(address):(bool)", [
      ethereum.Value.fromAddress(_poolLogic)
    ]);

    return result[0].toBoolean();
  }

  try_setPoolLogic(_poolLogic: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("setPoolLogic", "setPoolLogic(address):(bool)", [
      ethereum.Value.fromAddress(_poolLogic)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportedAssets(param0: BigInt): PoolManagerLogic__supportedAssetsResult {
    let result = super.call(
      "supportedAssets",
      "supportedAssets(uint256):(address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PoolManagerLogic__supportedAssetsResult(
      result[0].toAddress(),
      result[1].toBoolean()
    );
  }

  try_supportedAssets(
    param0: BigInt
  ): ethereum.CallResult<PoolManagerLogic__supportedAssetsResult> {
    let result = super.tryCall(
      "supportedAssets",
      "supportedAssets(uint256):(address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolManagerLogic__supportedAssetsResult(
        value[0].toAddress(),
        value[1].toBoolean()
      )
    );
  }

  totalFundValue(): BigInt {
    let result = super.call("totalFundValue", "totalFundValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFundValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFundValue",
      "totalFundValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trader(): Address {
    let result = super.call("trader", "trader():(address)", []);

    return result[0].toAddress();
  }

  try_trader(): ethereum.CallResult<Address> {
    let result = super.tryCall("trader", "trader():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validateAsset(asset: Address): boolean {
    let result = super.call("validateAsset", "validateAsset(address):(bool)", [
      ethereum.Value.fromAddress(asset)
    ]);

    return result[0].toBoolean();
  }

  try_validateAsset(asset: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateAsset",
      "validateAsset(address):(bool)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddMemberCall extends ethereum.Call {
  get inputs(): AddMemberCall__Inputs {
    return new AddMemberCall__Inputs(this);
  }

  get outputs(): AddMemberCall__Outputs {
    return new AddMemberCall__Outputs(this);
  }
}

export class AddMemberCall__Inputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddMemberCall__Outputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }
}

export class AddMembersCall extends ethereum.Call {
  get inputs(): AddMembersCall__Inputs {
    return new AddMembersCall__Inputs(this);
  }

  get outputs(): AddMembersCall__Outputs {
    return new AddMembersCall__Outputs(this);
  }
}

export class AddMembersCall__Inputs {
  _call: AddMembersCall;

  constructor(call: AddMembersCall) {
    this._call = call;
  }

  get members(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddMembersCall__Outputs {
  _call: AddMembersCall;

  constructor(call: AddMembersCall) {
    this._call = call;
  }
}

export class AnnounceFeeIncreaseCall extends ethereum.Call {
  get inputs(): AnnounceFeeIncreaseCall__Inputs {
    return new AnnounceFeeIncreaseCall__Inputs(this);
  }

  get outputs(): AnnounceFeeIncreaseCall__Outputs {
    return new AnnounceFeeIncreaseCall__Outputs(this);
  }
}

export class AnnounceFeeIncreaseCall__Inputs {
  _call: AnnounceFeeIncreaseCall;

  constructor(call: AnnounceFeeIncreaseCall) {
    this._call = call;
  }

  get _performanceFeeNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _managerFeeNumerator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AnnounceFeeIncreaseCall__Outputs {
  _call: AnnounceFeeIncreaseCall;

  constructor(call: AnnounceFeeIncreaseCall) {
    this._call = call;
  }
}

export class ChangeAssetsCall extends ethereum.Call {
  get inputs(): ChangeAssetsCall__Inputs {
    return new ChangeAssetsCall__Inputs(this);
  }

  get outputs(): ChangeAssetsCall__Outputs {
    return new ChangeAssetsCall__Outputs(this);
  }
}

export class ChangeAssetsCall__Inputs {
  _call: ChangeAssetsCall;

  constructor(call: ChangeAssetsCall) {
    this._call = call;
  }

  get _addAssets(): Array<ChangeAssetsCall_addAssetsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      ChangeAssetsCall_addAssetsStruct
    >();
  }

  get _removeAssets(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class ChangeAssetsCall__Outputs {
  _call: ChangeAssetsCall;

  constructor(call: ChangeAssetsCall) {
    this._call = call;
  }
}

export class ChangeAssetsCall_addAssetsStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get isDeposit(): boolean {
    return this[1].toBoolean();
  }
}

export class ChangeManagerCall extends ethereum.Call {
  get inputs(): ChangeManagerCall__Inputs {
    return new ChangeManagerCall__Inputs(this);
  }

  get outputs(): ChangeManagerCall__Outputs {
    return new ChangeManagerCall__Outputs(this);
  }
}

export class ChangeManagerCall__Inputs {
  _call: ChangeManagerCall;

  constructor(call: ChangeManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newManagerName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeManagerCall__Outputs {
  _call: ChangeManagerCall;

  constructor(call: ChangeManagerCall) {
    this._call = call;
  }
}

export class CommitFeeIncreaseCall extends ethereum.Call {
  get inputs(): CommitFeeIncreaseCall__Inputs {
    return new CommitFeeIncreaseCall__Inputs(this);
  }

  get outputs(): CommitFeeIncreaseCall__Outputs {
    return new CommitFeeIncreaseCall__Outputs(this);
  }
}

export class CommitFeeIncreaseCall__Inputs {
  _call: CommitFeeIncreaseCall;

  constructor(call: CommitFeeIncreaseCall) {
    this._call = call;
  }
}

export class CommitFeeIncreaseCall__Outputs {
  _call: CommitFeeIncreaseCall;

  constructor(call: CommitFeeIncreaseCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _manager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _managerName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _poolLogic(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _performanceFeeNumerator(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _managerFeeNumerator(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _supportedAssets(): Array<InitializeCall_supportedAssetsStruct> {
    return this._call.inputValues[6].value.toTupleArray<
      InitializeCall_supportedAssetsStruct
    >();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_supportedAssetsStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get isDeposit(): boolean {
    return this[1].toBoolean();
  }
}

export class RemoveMemberCall extends ethereum.Call {
  get inputs(): RemoveMemberCall__Inputs {
    return new RemoveMemberCall__Inputs(this);
  }

  get outputs(): RemoveMemberCall__Outputs {
    return new RemoveMemberCall__Outputs(this);
  }
}

export class RemoveMemberCall__Inputs {
  _call: RemoveMemberCall;

  constructor(call: RemoveMemberCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveMemberCall__Outputs {
  _call: RemoveMemberCall;

  constructor(call: RemoveMemberCall) {
    this._call = call;
  }
}

export class RemoveMembersCall extends ethereum.Call {
  get inputs(): RemoveMembersCall__Inputs {
    return new RemoveMembersCall__Inputs(this);
  }

  get outputs(): RemoveMembersCall__Outputs {
    return new RemoveMembersCall__Outputs(this);
  }
}

export class RemoveMembersCall__Inputs {
  _call: RemoveMembersCall;

  constructor(call: RemoveMembersCall) {
    this._call = call;
  }

  get members(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveMembersCall__Outputs {
  _call: RemoveMembersCall;

  constructor(call: RemoveMembersCall) {
    this._call = call;
  }
}

export class RemoveTraderCall extends ethereum.Call {
  get inputs(): RemoveTraderCall__Inputs {
    return new RemoveTraderCall__Inputs(this);
  }

  get outputs(): RemoveTraderCall__Outputs {
    return new RemoveTraderCall__Outputs(this);
  }
}

export class RemoveTraderCall__Inputs {
  _call: RemoveTraderCall;

  constructor(call: RemoveTraderCall) {
    this._call = call;
  }
}

export class RemoveTraderCall__Outputs {
  _call: RemoveTraderCall;

  constructor(call: RemoveTraderCall) {
    this._call = call;
  }
}

export class RenounceFeeIncreaseCall extends ethereum.Call {
  get inputs(): RenounceFeeIncreaseCall__Inputs {
    return new RenounceFeeIncreaseCall__Inputs(this);
  }

  get outputs(): RenounceFeeIncreaseCall__Outputs {
    return new RenounceFeeIncreaseCall__Outputs(this);
  }
}

export class RenounceFeeIncreaseCall__Inputs {
  _call: RenounceFeeIncreaseCall;

  constructor(call: RenounceFeeIncreaseCall) {
    this._call = call;
  }
}

export class RenounceFeeIncreaseCall__Outputs {
  _call: RenounceFeeIncreaseCall;

  constructor(call: RenounceFeeIncreaseCall) {
    this._call = call;
  }
}

export class SetFeeNumeratorCall extends ethereum.Call {
  get inputs(): SetFeeNumeratorCall__Inputs {
    return new SetFeeNumeratorCall__Inputs(this);
  }

  get outputs(): SetFeeNumeratorCall__Outputs {
    return new SetFeeNumeratorCall__Outputs(this);
  }
}

export class SetFeeNumeratorCall__Inputs {
  _call: SetFeeNumeratorCall;

  constructor(call: SetFeeNumeratorCall) {
    this._call = call;
  }

  get _performanceFeeNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _managerFeeNumerator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFeeNumeratorCall__Outputs {
  _call: SetFeeNumeratorCall;

  constructor(call: SetFeeNumeratorCall) {
    this._call = call;
  }
}

export class SetNftMembershipCollectionAddressCall extends ethereum.Call {
  get inputs(): SetNftMembershipCollectionAddressCall__Inputs {
    return new SetNftMembershipCollectionAddressCall__Inputs(this);
  }

  get outputs(): SetNftMembershipCollectionAddressCall__Outputs {
    return new SetNftMembershipCollectionAddressCall__Outputs(this);
  }
}

export class SetNftMembershipCollectionAddressCall__Inputs {
  _call: SetNftMembershipCollectionAddressCall;

  constructor(call: SetNftMembershipCollectionAddressCall) {
    this._call = call;
  }

  get newNftMembershipCollectionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNftMembershipCollectionAddressCall__Outputs {
  _call: SetNftMembershipCollectionAddressCall;

  constructor(call: SetNftMembershipCollectionAddressCall) {
    this._call = call;
  }
}

export class SetPoolLogicCall extends ethereum.Call {
  get inputs(): SetPoolLogicCall__Inputs {
    return new SetPoolLogicCall__Inputs(this);
  }

  get outputs(): SetPoolLogicCall__Outputs {
    return new SetPoolLogicCall__Outputs(this);
  }
}

export class SetPoolLogicCall__Inputs {
  _call: SetPoolLogicCall;

  constructor(call: SetPoolLogicCall) {
    this._call = call;
  }

  get _poolLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPoolLogicCall__Outputs {
  _call: SetPoolLogicCall;

  constructor(call: SetPoolLogicCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetTraderCall extends ethereum.Call {
  get inputs(): SetTraderCall__Inputs {
    return new SetTraderCall__Inputs(this);
  }

  get outputs(): SetTraderCall__Outputs {
    return new SetTraderCall__Outputs(this);
  }
}

export class SetTraderCall__Inputs {
  _call: SetTraderCall;

  constructor(call: SetTraderCall) {
    this._call = call;
  }

  get newTrader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTraderCall__Outputs {
  _call: SetTraderCall;

  constructor(call: SetTraderCall) {
    this._call = call;
  }
}
