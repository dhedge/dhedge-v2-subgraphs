type FundCreated @entity(immutable: true) {
  id: ID!
  fundAddress: Bytes! # address
  isPoolPrivate: Boolean! # bool
  fundName: String! # string
  managerName: String! # string
  manager: Bytes! # address
  time: BigInt! # uint256
  performanceFeeNumerator: BigInt!
  managerFeeNumerator: BigInt! # uint256
  managerFeeDenominator: BigInt! # uint256
  uniqueManager: Manager!
}

type Deposit @entity(immutable: true) {
  id: ID!
  fundAddress: Bytes!
  investor: Bytes!
  assetDeposited: Bytes!
  valueDeposited: BigInt!
  fundTokensReceived: BigInt!
  totalInvestorFundTokens: BigInt!
  fundValue: BigInt!
  time: BigInt!
  blockNumber: Int!
  pool: Pool!
  totalSupply: BigDecimal!
  poolName: String!
  managerName: String!
  manager: Bytes
  uniqueInvestor: Investor!
}

type ManagerFeeMinted @entity(immutable: true) {
  id: ID!
  pool: Bytes!
  manager: Bytes!
  available: BigInt!
  daoFee: BigInt!
  managerFee: BigInt!
  tokenPriceAtLastFeeMint: BigInt!
  tokenPriceAtFeeMint: BigInt
  block: Int!
  blockTimestamp: BigInt!
}

type TransactionExecuted @entity(immutable: true) {
  id: ID!
  pool: Bytes!
  manager: Bytes!
  transactionType: Int!
  time: BigInt!
  blockNumber: Int!
  poolName: String!
  managerName: String!
}

type Transfer @entity(immutable: true) {
  id: ID!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  address: String!
  tokenPrice: BigInt
  block: Int!
  blockTimestamp: BigInt!
}

type Withdrawal @entity(immutable: true) {
  id: ID!
  fundAddress: Bytes!
  investor: Bytes!
  valueWithdrawn: BigInt!
  fundTokensWithdrawn: BigInt!
  totalInvestorFundTokens: BigInt
  fundValue: BigInt!
  time: BigInt!
  block: Int!
  totalSupply: BigDecimal!
  pool: Pool!
  poolName: String!
  uniqueInvestor: Investor!
  managerName: String!
}

type Pool @entity(immutable: false) {
  id: ID!
  fundAddress: Bytes!
  name: String!
  manager: Bytes # optional
  managerName: String!
  totalSupply: BigDecimal!
  tokenPrice: BigInt # optional
  decimals: BigInt # optional
  deposits: [Deposit!]! @derivedFrom(field: "pool")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "pool")
}

type Manager @entity(immutable: false) {
  id: ID!
  managerAddress: Bytes! # address
  fundCreated: [FundCreated!]! @derivedFrom(field: "uniqueManager")
}

type Investor @entity(immutable: false) {
  id: ID!
  investorAddress: Bytes! # address
  deposits: [Deposit!]! @derivedFrom(field: "uniqueInvestor")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "uniqueInvestor")
}

type EntryFeeMinted @entity(immutable: true) {
  id: ID!
  pool: Bytes!
  managerAddress: Bytes! # address
  entryFeeAmount: BigInt!
  tokenPrice: BigInt
  blockNumber: Int!
  time: BigInt!
}

type ExitFeeMinted @entity(immutable: true) {
  id: ID!
  pool: Bytes!
  managerAddress: Bytes! # address
  exitFeeAmount: BigInt!
  tokenPrice: BigInt
  blockNumber: Int!
  time: BigInt!
}
